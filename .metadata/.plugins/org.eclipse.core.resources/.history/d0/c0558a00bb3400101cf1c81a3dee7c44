package org.serratec.backend.exception;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.serratec.backend.controller.VeiculoException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.fasterxml.jackson.databind.JsonMappingException;

@ControllerAdvice
public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatusCode status, WebRequest request) {

		List<String> erros = new ArrayList<>();

		for (FieldError erro : ex.getBindingResult().getFieldErrors()) {
			erros.add(erro.getField() + ":" + erro.getDefaultMessage());
		}
		ErroResposta erroResposta = new ErroResposta(status.value(), "Existem campos inválidos", LocalDateTime.now(),
				erros);

		return super.handleExceptionInternal(ex, erroResposta, headers, status, request);
	}

	@Override
	protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
	        HttpHeaders headers, HttpStatusCode status, WebRequest request) {

	    List<String> erros = new ArrayList<>();

	    Throwable causa = ex.getCause();

	    if (causa instanceof com.fasterxml.jackson.databind.exc.InvalidFormatException invalidFormatException) {
	        for (JsonMappingException.Reference ref : invalidFormatException.getPath()) {
	            String campo = ref.getFieldName();
	            String valorRejeitado = invalidFormatException.getValue() != null ? invalidFormatException.getValue().toString() : "null";
	            erros.add("Campo '" + campo + "' recebeu valor inválido: '" + valorRejeitado + "'");
	        }
	    } else if (causa instanceof com.fasterxml.jackson.databind.exc.MismatchedInputException mismatchedInputException) {
	        for (JsonMappingException.Reference ref : mismatchedInputException.getPath()) {
	            String campo = ref.getFieldName();
	            erros.add("Campo '" + campo + "' está com tipo inválido ou ausente.");
	        }
	    } else {
	        erros.add("Erro de leitura do corpo da requisição: " + ex.getMostSpecificCause().getMessage());
	    }

	    ErroResposta erroResposta = new ErroResposta(status.value(), "Erro na leitura do corpo da requisição", LocalDateTime.now(), erros);
	    return new ResponseEntity<>(erroResposta, headers, status);
	}

	@ExceptionHandler(VeiculoException.class)
	protected ResponseEntity<Object> handleVeiculoException(VeiculoException ex, HttpHeaders headers,
			HttpStatusCode status, WebRequest request) {
		return ResponseEntity.badRequest().body(ex.getMessage());
	}

}
